apiVersion: v1 # postgresql secrets
kind: Secret
metadata:
  name: postgresql
  annotations:
    template.openshift.io/expose-password: '{.data[''database-password'']}'
    template.openshift.io/expose-username: '{.data[''database-user'']}'
stringData:
  database-password: "xU14St?prlVUs5tAJop="
  database-user: "grouper"
---
apiVersion: v1 # postgresql service
kind: Service
metadata:
  annotations:
    template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
  name: postgresql
spec:
  ports:
  - name: postgresql
    nodePort: 0
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: postgresql
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1 # postgresql deployment
kind: Deployment
metadata:
  name: postgresql
  #namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgresql
        image: registry.redhat.io/rhel8/postgresql-10
        imagePullPolicy: Always
        resources:
          limits:
            memory: 4Gi
            cpu: 4
          requests:
            memory: 2Gi
            cpu: 2
        env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: postgresql
                key: database-user
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgresql
                key: database-password
          - name: POSTGRESQL_DATABASE
            value: grouper
        ports:
          - containerPort: 5432
            protocol: TCP
---
apiVersion: v1 # grouper secrets
kind: Secret
metadata:
  name: grouper
  annotations:
    template.openshift.io/expose-quickstart-pass: '{.data[''grouper-morphstring-encrypt-key'']}'
    template.openshift.io/expose-groupersystem-quickstart-pass: '{.data[''groupersystem-quickstart-pass'']}'
    template.openshift.io/expose-groupersystem-quickstart-user: '{.data[''groupersystem-quickstart-user'']}'
stringData:
  grouper-morphstring-encrypt-key: "xU14St?prlVUs5tAJop="
  groupersystem-quickstart-pass: "xU14St?prlVUs5tAJop="
  groupersystem-quickstart-user: "GrouperSystem"
---
apiVersion: v1 # grouper service
kind: Service
metadata:
  name: grouper
  labels:
    name: grouper
spec:
  ports:
  - name: grouper
    nodePort: 0
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: grouper
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1 # grouper deployment
kind: Deployment
metadata:
  name: grouper
  #namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grouper
  template:
    metadata:
      labels:
        app: grouper
    spec:
      containers:
      - name: grouper
        image: docker.io/i2incommon/grouper:5.6.0
        imagePullPolicy: Always
        resources:
          limits:
            memory: 4Gi
            cpu: 4
          requests:
            memory: 2Gi
            cpu: 2
        args:
          - quickstart
        env:
          - name: GROUPER_MORPHSTRING_ENCRYPT_KEY
            valueFrom:
              secretKeyRef:
                key: grouper-morphstring-encrypt-key
                name: grouper
          - name: GROUPER_DATABASE_URL
            value: jdbc:postgresql://postgresql:5432/grouper?currentSchema=public
          - name: GROUPER_DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: postgresql
                key: database-user
          - name: GROUPER_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgresql
                key: database-password
          - name: GROUPERSYSTEM_QUICKSTART_PASS
            valueFrom:
              secretKeyRef:
                key: groupersystem-quickstart-pass
                name: grouper
          - name: GROUPER_RUN_APACHE
            value: 'true'
          - name: GROUPER_RUN_TOMCAT
            value: 'true'
          - name: GROUPER_RUN_TOMEE
            value: 'true'
          - name: GROUPER_OPENSHIFT
            value: 'true'
        ports:
          - containerPort: 8080
            protocol: TCP
---
apiVersion: route.openshift.io/v1 # grouper route
kind: Route
metadata:
  annotations:
    template.openshift.io/expose-uri: http://{.spec.host}{.spec.path}
  name: grouper
spec:
  path: /grouper
  to:
    kind: Service
    name: grouper
  port:
    targetPort: 8080
